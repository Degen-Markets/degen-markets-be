import betCreatedHandler from "../betCreatedHandler";
import { mockClient } from "aws-sdk-client-mock";
import "aws-sdk-client-mock-jest";
import { SendMessageCommand, SQSClient } from "@aws-sdk/client-sqs";
import { createEvent } from "./utils";
import * as NotificationsService from "../../../notifications/NotificationsService";

const validBetCreatedEvent = {
  id: "f602fc53-4b74-4eb5-af6a-daf200e13870",
  betType: "binary",
  creationTimestamp: 1716728105,
  ticker: "BTC",
  metric: "price",
  isBetOnUp: false,
  expirationTimestamp: 1716728225,
  value: 10000000000,
  strikePriceCreator: "69200",
  currency: "0x0000000000000000000000000000000000000000",
  chain: "blast",
  creator: "0xe03e3f9ad56862184594f95811bd18cdc0bab495",
};

const validBetCreatedEventData =
  "0x000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000006653312900000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000665331a1000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002466363032666335332d346237342d346562352d616636612d64616632303065313338373000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000662696e6172790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000342544300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005707269636500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000053639323030000000000000000000000000000000000000000000000000000000";

describe("betCreatedHandler", () => {
  const sqsMock = mockClient(SQSClient);
  beforeEach(() => {
    process.env = {
      MESSAGE_GROUP_ID: "MESSAGE_GROUP_ID",
      QUEUE_URL: "QUEUE_URL",
      TELEGRAM_BOT_KEY: "TELEGRAM_BOT_KEY",
      TELEGRAM_CHAT_ID: "TELEGRAM_CHAT_ID",
    };
    sqsMock.reset();
  });
  test("WHEN valid event THEN processes it", async () => {
    sqsMock.on(SendMessageCommand).resolvesOnce({});
    const spyFn = jest.fn();
    jest
      .spyOn(NotificationsService, "sendTelegramMessage")
      .mockImplementation(spyFn);
    const response = await betCreatedHandler(
      createEvent(validBetCreatedEventData, "/create-bet", { chain: "blast" }),
    );
    expect(spyFn).toHaveBeenCalledWith(
      "New Bet(s) Created:\n\nhttps://degenmarkets.com/bets/f602fc53-4b74-4eb5-af6a-daf200e13870",
    );
    expect(sqsMock).toHaveReceivedCommandWith(SendMessageCommand, {
      MessageBody: JSON.stringify({
        eventName: "BetCreated",
        bets: [validBetCreatedEvent],
      }),
      QueueUrl: "QUEUE_URL",
      MessageGroupId: "MESSAGE_GROUP_ID",
      MessageDeduplicationId: "0xha5h",
    });
    expect(response).toEqual(200);
  });
});
